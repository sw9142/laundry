<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 스프링의 가장 핵심 부품인 DispatcherServlet 이 추가적으로 알아야할 설정들을 등록하는 파일 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller 와 같은 스프링에서 주로 쓰이는 어노테이션을 활성화 시켜주는 설정 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!--
		resources : 정적 자원들을 담아두는 폴더
					이미지, css, js 파일 등을 의미함 => 컴파일 등의 사전 작업 없이 접근 가능한 파일들 (정적 자원들)
		=> 동적 자원들을 담아두는 폴더 : src (source 의 약자)
		
		resources 설정 : 정적 자원같은 경우 DispatcherServlet 이 처리할 수 없음
					       있는 그대로 사전 처리 없이 접근할 수 있도록 해야함.
			=> location : 실제 webapp 폴더 내의 위치를 의미
			=> mapping : 접근할 주소를 제시 (** 는 하위 모든 내용을 의미)
		즉, resources 설정을 하게되면 resources 라는 폴더까지는 기본 경로를 잡아줘서 파일에 사전처리 없이 접근할 수 있게 하겠다.
	-->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
		주소 자동 완성 도구(View Resolves) 등록하는 부분
		- 매번 /WEB-INF/views/XXXX.jsp 를 적기 귀찮으니까 자동완성 시켜준다.
		- view resolver 라는 도구를 등록 (Spring 에서 제공해줌)
		(도구를 등록하겠다 == bean을 등록하겠다 == 외부 라이브러리에서 제공하는 클래스를 가져다 쓰겠다.)
			=> class : 패키지 경로를 포함한 내가 가져다 쓸 클래스명
			=> beans:property : 추가적인 설정값들을 작성
			=> prefix : 접두어 / suffix : 접미어
		즉, 앞으로 작성할 return "파일명" 부분에 접두어랑 접미어를 항상 붙여서 요청하겠다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		jar 를 다운받았다고 그냥 쓸 수 있는 것이 아님!!
		jar 파일 안에 패키지 안에 내가 쓰고자하는 .class 파일을 도구(bean)로써 가져다 쓰겠다고
		추가를 해줘야 함
		
		도구 등록하는 방법
		1. pom.xml 에 내가 필요로 하는 jar 파일을 추가하는 구문 작성 (dependency 태그로)
		2. Maven Update => Maven Dependencies 에 추가된것 확인
		3. 내가 그중에서도 필요한 도구를 sevlet-context.xml 파일에 bean 으로 등록
		
		* 데이터베이스 도구 등록
		- 연결 도구 : org.springframework.jdbc.datasource.DriverManagerDataSource.class
		- 명령 도구 : org.springframework.jdbc.core.JdbcTemplate.class
	-->
	<!-- 연결 도구 등록 -->
	<!-- 연결 도구를 등록하기 전에 외부 properties 형식의 파일을 갖고와서 연동하겠다. -->
	<context:property-placeholder location="classpath:/jdbc/driver.properties"></context:property-placeholder>
	<!-- id : 이 도구의 이름을 지정하겠다. -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> <!-- 도구를 어디서 가져다가 등록하겠다. -->
		<!-- 추가적인 도구의 사용법 지정 (도구의 환경설정값, 키-밸류 세트) => beans:property 태그를 이용 -->
		<!-- driverClassName, url, username, password 등록 => driver.propeties 에 있던 애들 -->
		<beans:property name="driverClassName" value="${jdbc.driver}"></beans:property>
		<beans:property name="url" value="${jdbc.url}"></beans:property>
		<beans:property name="username" value="${jdbc.username}"></beans:property>
		<beans:property name="password" value="${jdbc.password}"></beans:property> <!-- 이 도구를 어떤식으로 사용하겠다. -->
	</beans:bean>
	<!-- 명령 도구 등록 -->
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<!-- 명령을 내릴 때 위에서 지정했던 연결도구를 참조해서 명령을 내리겠다. (== 도구에서 도구를 가져다 쓰겠다.) -->
		<!-- DI (Dependency Injection) : 필요한 도구를 주입시키겠다. -->
	</beans:bean>
	
	<!-- 
		* MyBatis 를 이용하기 위한 도구를 등록
		- sqlSession : 실제로 SQL 구문을 실행시키는 도구 (명령 도구)
			org.mybatis.spring.SqlSessionFactoryBean.class
		- sqlSessionTemplate : 구문 실행을 위한 템플릿을 제공하는 도구 (JDBC 에서 JDBCTemplate 클래스의 역할 == 연결도구)
			org.mybatis.spring.SqlSessionTemplate.class
	-->
	<!-- sqlSession : 명령 도구 (==실행 도구) 를 등록 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 연결을 위한 도구를 참조 (ref) 설정 : 연결정보를 끌어다 씀 -->
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<!-- MyBatis 설정파일 (mybatis-config.xml) 의 위치를 지정 -->
		<beans:property name="configLocation" value="classpath:/mybatis-config.xml"></beans:property>
		<!-- 실제 실행할 쿼리문이 담긴 명령 파일 (xxx-mapper.xml) 위치를 지정 -->
		<beans:property name="mapperLocations" value="classpath:/mappers/**/*-mapper.xml"></beans:property>
	</beans:bean>
	<!-- sqlSessionTemplate : 연결 도구 등록 -->
	<beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
			<!-- MyBatis 실행 도구에 대한 참조 (ref) 설정 -->
			<beans:constructor-arg index="0" ref="sqlSession"></beans:constructor-arg>
	</beans:bean>
	
	<!-- 
		base-package 에서 설정된 패키지와 그 이하의 모든 패키지를 감시하여
		등록 가능한 도구를 모두 찾아서 자동 등록시켜주는 설정
	 -->
	<context:component-scan base-package="com.kh.laundry" />
	
</beans:beans>
